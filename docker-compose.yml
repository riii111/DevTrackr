version: "3"
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT:-3003}:3003"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    command: yarn dev
    networks:
      - devtrackr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003"]
      interval: 30s
      timeout: 10s
      retries: 3

  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile.dev
  #   ports:
  #     - "${BACKEND_PORT:-8080}:8080"
  #   volumes:
  #     - ./backend:/usr/src/app
  #     - /usr/src/app/target
  #   environment:
  #     - RUST_LOG=${RUST_LOG:-debug}
  #     - DATABASE_URL=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27018/${MONGO_INITDB_DATABASE}?authSource=admin
  #   networks:
  #     - devtrackr-network
  #   depends_on:
  #     - mongo
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  mongo:
    image: mongo:6.0.8 # 2023/09時点でのstable版
    ports:
      - "${MONGO_PORT:-27018}:27018" # 別システムと重複しているため変更
    command: mongod --port 27018 --auth
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE:-devtrackr}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - devtrackr-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@localhost:27018/admin --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  mongo-express:
    image: mongo-express:1.0.0-alpha.4 # 2023/09時点でのstable版
    ports:
      - "127.0.0.1:${MONGO_EXPRESS_PORT:-8082}:8081" # 別システムと重複しているため変更
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27018
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
      ME_CONFIG_MONGODB_AUTH_DATABASE: admin
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27018/
      ME_CONFIG_OPTIONS_EDITORTHEME: ambiance
      ME_CONFIG_REQUEST_SIZE: 100kb
      ME_CONFIG_SITE_GRIDFS: "true" # GridFS(MongoDBのファイルStorage)を有効化. 大きなファイルを保存できる
    depends_on:
      mongo:
        condition: service_healthy # 完全に起動し、認証の準備が出来てから接続を試みる
    networks:
      - devtrackr-network

  # https://zenn.dev/pitekusu/books/traefik-pitekusu
  # TODO: HTTPS通信化  → https://zenn.dev/pitekusu/books/traefik-pitekusu/viewer/https
  traefik:
    image: traefik:v2.11.1
    restart: always
    ports:
      - "80:80"
      - "8080:8080" # Traefikダッシュボード用のポートを追加
    networks:
      - devtrackr-network
    environment:
      TZ: Asia/Tokyo
    labels:
      traefik.enable: true
      traefik.http.routers.dashboard.rule: Host(`localhost`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      traefik.http.routers.dashboard.service: api@internal # dashboardの場合の記述
      traefik.http.routers.dashboard.entrypoints: web # traefik.ymlで指定した内容
      traefik.http.middlewares.auth.basicauth.users: traefik:$$apr1$$eYIpOr/G$4H3I5A1aMZcIT3MA/VhbT. # TODO: BASIC認証有効化.
      traefik.http.routers.dashboard.middlewares: auth
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./backend/traefik/traefik.yml:/etc/traefik/traefik.yml:ro

networks:
  devtrackr-network:
    external: true

volumes:
  mongodb_data:
