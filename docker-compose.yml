services:
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    image: devtrackr-api:latest
    expose:
      - 8088
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/target
    networks:
      - mynet
    env_file:
      - .env
    depends_on:
      - mongo
      - redis
      - minio
    deploy:
      replicas: 1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-api.entrypoints=web"
      - "traefik.http.routers.backend-api.rule=Host(`localhost`)"
      - "traefik.http.routers.backend-api.middlewares=cors@file"
      - "traefik.http.services.backend-api.loadbalancer.server.port=8088"

  redis:
    image: redis:6.2-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - mynet

  mongo:
    image: mongo:6.0.8 # 2023/09時点でのstable版
    ports:
      - "${MONGO_PORT:-27018}:27018" # 別システムと重複しているため変更
    command: mongod --port 27018 --auth
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE:-devtrackr}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - mynet
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@localhost:27018/admin --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  mongo-express:
    image: mongo-express:1.0.0-alpha.4 # 2023/09時点でのstable版
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27018
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
      ME_CONFIG_MONGODB_AUTH_DATABASE: admin
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27018/
      ME_CONFIG_OPTIONS_EDITORTHEME: ambiance
      ME_CONFIG_REQUEST_SIZE: 100kb
      ME_CONFIG_SITE_GRIDFS: "true" # GridFS(MongoDBのファイルStorage)を有効化. 大きなファイルを保存できる
    # env_file:
    #   - .env
    depends_on:
      mongo:
        condition: service_healthy # 完全に起動し、認証の準備が出来てから接続を試みる
    networks:
      - mynet
    labels:
      # Mongo Express
      - "traefik.enable=true"
      - "traefik.http.routers.mongo-express.entrypoints=web"
      - "traefik.http.routers.mongo-express.rule=Host(`db-admin.localhost`)"
      # Basic認証
      # - "traefik.http.routers.mongo-express.middlewares=auth"

  reverse-proxy:
    image: traefik:3.1.2
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true" # 開発環境用、本番ではfalse.
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.dashboard.address=:8081"
      - "--providers.docker.network=mynet"
      # Traefikのダッシュボード
      - "--api.dashboard=true"
      # アクセスログ
      - "--accesslog=true"
      - "--accesslog.filePath=/logs/access.log"
      - "--accesslog.format=json"
      # ミドルウェア用
      - "--providers.file.filename=/etc/traefik.yml"
      - "--providers.file.watch=true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik-logs:/logs
      - ./backend/traefik/traefik.yml:/etc/traefik.yml
    deploy:
      placement:
        constraints:
          - node.role == manager
    ports:
      - 80:80
      - 8081:8081 # Traefikのダッシュボード用
    networks:
      - mynet

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
    command: server --console-address ":9001" /data

networks:
  mynet:
    driver: "bridge" # デフォルトのネットワークドライバ
    # driver: "overlay" # Docker Swarmのネットワークドライバ
    attachable: true # ネットワークに接続可能なコンテナを作成する

volumes:
  mongodb_data:
  traefik-logs:
  minio_storage: {}
