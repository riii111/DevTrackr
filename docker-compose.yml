services:
  # TODO: shadcnのissueが片付いたらコンテナ化する.
  #   frontend:
  #     build:
  #       context: ./frontend
  #       dockerfile: Dockerfile
  #     ports:
  #       - "${FRONTEND_PORT:-3003}:3003"
  #     volumes:
  #       - ./frontend:/app
  #       - /app/node_modules
  #       - /app/.next
  #     environment:
  #       - NODE_ENV=${NODE_ENV:-development}
  #     command: yarn dev
  #     networks:
  #       - devtrackr-network
  #     healthcheck:
  #       test: ["CMD", "curl", "-f", "http://localhost:${FRONTEND_PORT}"]
  #       interval: 30s
  #       timeout: 10s
  #       retries: 3
  #     labels:
  #       - "traefik.enable=true"
  #       - "traefik.http.routers.frontend.entrypoints=web"
  #       - "traefik.http.routers.frontend.rule=Host(`frontend.localhost`)"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "${BACKEND_PORT:-8082}:8082"
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/target
    networks:
      - devtrackr-network
    environment:
      - RUST_LOG=${RUST_LOG:-debug}
      - DATABASE_URL=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27018/${MONGO_INITDB_DATABASE}?authSource=admin
      - HOST=0.0.0.0
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 5 # コンパイル待ち?
      start_period: 1m
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.routers.backend.rule=PathPrefix(`/back`)"
      - "traefik.http.middlewares.strip-back-prefix.stripprefix.prefixes=/back"
      - "traefik.http.routers.backend.middlewares=strip-back-prefix@docker"
      - "traefik.http.services.backend.loadbalancer.server.port=8082"
      - "traefik.docker.network=devtrackr-network"

  mongo:
    image: mongo:6.0.8 # 2023/09時点でのstable版
    ports:
      - "${MONGO_PORT:-27018}:27018" # 別システムと重複しているため変更
    command: mongod --port 27018 --auth
    environment:
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE:-devtrackr}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - devtrackr-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@localhost:27018/admin --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  mongo-express:
    image: mongo-express:1.0.0-alpha.4 # 2023/09時点でのstable版
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27018
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
      ME_CONFIG_MONGODB_AUTH_DATABASE: admin
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27018/
      ME_CONFIG_OPTIONS_EDITORTHEME: ambiance
      ME_CONFIG_REQUEST_SIZE: 100kb
      ME_CONFIG_SITE_GRIDFS: "true" # GridFS(MongoDBのファイルStorage)を有効化. 大きなファイルを保存できる
    depends_on:
      mongo:
        condition: service_healthy # 完全に起動し、認証の準備が出来てから接続を試みる
    networks:
      - devtrackr-network
    labels:
      # Mongo Express
      - "traefik.enable=true"
      - "traefik.http.routers.mongo-express.entrypoints=web"
      - "traefik.http.routers.mongo-express.rule=Host(`mongo-express.localhost`)"
      # Basic認証
      - "traefik.http.routers.mongo-express.middlewares=auth"

  # https://zenn.dev/pitekusu/books/traefik-pitekusu
  # TODO: HTTPS通信化  → https://zenn.dev/pitekusu/books/traefik-pitekusu/viewer/https
  traefik:
    image: traefik:v2.11.1
    ports:
      - "80:80"
      - "8081:8080" # Traefikダッシュボード用のポートを追加
    networks:
      - devtrackr-network
    environment:
      TZ: Asia/Tokyo
    depends_on:
      backend: # コンパイル待たずにヘルスチェック
        condition: service_started
    labels:
      # Traefikダッシュボード
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.entrypoints=web"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal" # dashboardを参照する場合の記述
      # TraefikダッシュボードのBasic認証
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_DASHBOARD_BASIC_AUTH_USERNAME}:$$apr1$$${TRAEFIK_DASHBOARD_BASIC_AUTH_PASSWORD}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./backend/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./logs/traefik:/var/log/traefik

# TODO: 他に起動中のコンテナ（SNHなど）もTraefikで拾ってしまうので設定必要

networks:
  devtrackr-network:
    external: true

volumes:
  mongodb_data:
