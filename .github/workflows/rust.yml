name: Rust CI
# バックエンドのRustコードの品質チェックを行うワークフロー
# - コードフォーマットのチェック
# - Clippyによる静的解析
# - セキュリティ監査
# - ビルドテスト（Ubuntu）
# - 未使用依存関係の検出
# - バイナリサイズ分析
# - テストの実行

on:
  pull_request:
    branches:
      - develop
      - master
    paths:
      - "backend/**"
  push:
    branches:
      - develop
      - master
    paths:
      - "backend/**"
  schedule:
    - cron: "0 0 * * 0" # 毎週日曜日の午前0時に実行
  workflow_dispatch: # 手動実行可

# 連続pushの対策
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # 実行中のワークフローをキャンセル

# GitHub Actionsの環境変数設定
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

# 各jobsは独立したワークフローとして実行されるので、各ジョブが同時に開始される
# なお、依存関係に変更がない場合はキャッシュを使うのでビルド高速化
jobs:
  # 共通のキャッシュ設定を定義
  cache-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            backend/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

  # フォーマットチェックのジョブ
  format:
    name: Format
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            backend/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Check formatting
        run: cargo fmt --all -- --check
  # 静的解析のジョブ
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            backend/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Clippy check
        run: cargo clippy -- -D warnings
  # セキュリティチェックのジョブ
  security:
    name: Security Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            backend/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Security audit
        run: cargo audit
  # ビルドチェックのジョブ
  build:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            backend/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Build check
        run: cargo build --release
  # 未使用依存関係の検出のジョブ
  unused-dependencies:
    name: Unused Dependencies Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            backend/target/
          key: ${{ runner.os }}-cargo-udeps-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-udeps-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-udeps-
      - name: Check if dependencies changed # 依存関係に変更がない場合はチェックをスキップし、変更がある場合のみ実行
        id: check-deps
        run: |
          if [ -f ~/.cargo/bin/cargo-udeps ] && [ "$(shasum Cargo.lock)" = "$(cat ~/.cargo/udeps-last-check 2>/dev/null)" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            shasum Cargo.lock > ~/.cargo/udeps-last-check
          fi
      - name: Install cargo-udeps
        if: steps.check-deps.outputs.skip != 'true'
        run: |
          if ! command -v cargo-udeps &> /dev/null; then
            cargo install cargo-udeps --locked
          fi
      - name: Run cargo-udeps
        if: steps.check-deps.outputs.skip != 'true'
        run: cargo +nightly udeps
  # バイナリサイズ分析のジョブ
  binary-size:
    name: Binary Size Analysis
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            backend/target/
          key: ${{ runner.os }}-cargo-bloat-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-bloat-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-bloat-
      - name: Install cargo-bloat
        run: cargo install cargo-bloat
      - name: Analyze binary size
        run: |
          cargo bloat --release --crates
          cargo bloat --release -n 20
  # テスト実行のジョブ
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27018:27017
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: ${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}
        options: >-
          --name=minio
          --health-cmd="curl -f http://localhost:9000/minio/health/live || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          --entrypoint server /data
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            backend/target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-test-

      - name: Create test env file
        run: |
          cat << EOF > .env.test
          TEST_DATABASE_URL=${{ secrets.TEST_DATABASE_URL }}
          MINIO_ENDPOINT=http://localhost:9000
          S3_REGION=${{ secrets.S3_REGION }}
          S3_BUCKET_NAME=devtrackr-test
          MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}
          JWT_SECRET=${{ secrets.TEST_JWT_SECRET }}
          EOF

      - name: Wait for MinIO
        run: |
          timeout 60s bash -c 'until curl -sf http://localhost:9000/minio/health/live; do sleep 1; done'

      - name: Setup MinIO
        run: |
          curl https://dl.min.io/client/mc/release/linux-amd64/mc --create-dirs -o mc
          chmod +x mc
          ./mc alias set local http://localhost:9000 ${{ secrets.MINIO_ROOT_USER }}

      - name: Run tests
        run: cargo test --verbose -- --test-threads=1
        env:
          RUST_BACKTRACE: 1
          RUST_LOG: debug
